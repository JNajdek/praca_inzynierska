#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0 on Sun Nov 10 12:42:30 2024
#

#todo active_sensors rozbić na dwa dla record i dla visualize
# default dir może niew wskazywać poprawnie bo nie pasują slashe
import wx

# begin wxGlade: dependencies
# end wxGlade
import numpy as np
import serial
import time
from datetime import datetime

from wx.lib.agw.shapedbutton import folder
from trigno_data_simulator import TrignoDataSimulator
from pyexpat import features

from libemg.feature_extractor import FeatureExtractor
from libemg.streamers import delsys_streamer
from libemg.data_handler import OnlineDataHandler, OfflineDataHandler, RegexFilter
from dotenv import set_key, load_dotenv, get_key
from pathlib import Path
import os
# begin wxGlade: extracode
# end wxGlade






class DialogAdjustVisualization(wx.Dialog):
    #zrobione za pomocą wxglade potem usunięte z drzewa by dokonywać modyfikacji w kodzie
    def __init__(self, mode="offline", *args, **kwds):
        self.visualization_additional_data={}
        self.mode = mode
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)

        if self.mode == 'Offline':
            self.SetSize((500, 400))
            self.SetTitle("dialog")
        if self.mode == 'Online':
            self.SetSize((500, 200))
            self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_4 = wx.StaticText(self, wx.ID_ANY, "Select the additional visualization parameters")
        label_4.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_1.Add(label_4, 0, wx.ALL, 15)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 20)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Enter the number of samples used\n for visualization")
        sizer_3.Add(label_1, 0, 0, 0)

        self.spin_ctrl_1 = wx.SpinCtrl(self, wx.ID_ANY, "1", min=1, max=100)
        sizer_3.Add(self.spin_ctrl_1, 0, wx.LEFT, 60)

        if self.mode == "Offline":
            sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
            sizer_1.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 20)

            label_2 = wx.StaticText(self, wx.ID_ANY, "Enter the number of samples in a window")
            sizer_4.Add(label_2, 0, 0, 0)

            self.spin_ctrl_2 = wx.SpinCtrl(self, wx.ID_ANY, "0", min=0, max=100)
            sizer_4.Add(self.spin_ctrl_2, 0, wx.LEFT, 25)

            sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
            sizer_1.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 20)

            label_3 = wx.StaticText(self, wx.ID_ANY, "Enter the number of samples\n that advances before next window")
            sizer_5.Add(label_3, 0, 0, 0)

            self.spin_ctrl_3 = wx.SpinCtrl(self, wx.ID_ANY, "0", min=0, max=100)
            sizer_5.Add(self.spin_ctrl_3, 0, wx.LEFT, 60)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        self.button_OK.Bind(wx.EVT_BUTTON, self.on_ok_pressed)
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())
        self.Layout()

    def on_ok_pressed(self, event):
        self.visualization_additional_data["num_samples"] = self.spin_ctrl_1.GetValue()
        if self.mode == "Offline":
            self.visualization_additional_data["window_size"] = self.spin_ctrl_2.GetValue()
            self.visualization_additional_data["windows_increment"] = self.spin_ctrl_3.GetValue()
        self.EndModal(wx.ID_OK)
        event.Skip()

class FeaturesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.selected_features = []
        # begin wxGlade: FeaturesDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Select features")
        label_1.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_1.Add(label_1, 0, wx.ALL, 12)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 30)

        self.choice_1 = wx.Choice(self, wx.ID_ANY, choices=["None", "MAV", "ZC", "SSC", "WL", "LS", "MFL", "MSR", "WAMP", "RMS", "IAV", "DASDV", "VAR", "M0", "M2", "M4", "SPARSI", "IFR", "WLF", "AR", "CC", "LD", "MAVFD", "MAVSLP", "MDF", "MNF", "MPK", "SKEW", "KURT", "RMSPHASOR", "PAP", "WLPHASOR", "MZP", "TM", "SM", "SAMPEN", "FUZZYEN", "DFTR", "ISD", "COR", "MDIFF", "MLK", "ACT", "MOB", "COMP", "WENG", "WV", "WWL", "WENT", "MEAN"])
        self.choice_1.SetSelection(0)
        sizer_3.Add(self.choice_1, 0, wx.ALL, 5)

        self.choice_2 = wx.Choice(self, wx.ID_ANY, choices=["None", "MAV", "ZC", "SSC", "WL", "LS", "MFL", "MSR", "WAMP", "RMS", "IAV", "DASDV", "VAR", "M0", "M2", "M4", "SPARSI", "IFR", "WLF", "AR", "CC", "LD", "MAVFD", "MAVSLP", "MDF", "MNF", "MPK", "SKEW", "KURT", "RMSPHASOR", "PAP", "WLPHASOR", "MZP", "TM", "SM", "SAMPEN", "FUZZYEN", "DFTR", "ISD", "COR", "MDIFF", "MLK", "ACT", "MOB", "COMP", "WENG", "WV", "WWL", "WENT", "MEAN"])
        self.choice_2.SetSelection(0)
        sizer_3.Add(self.choice_2, 0, wx.ALL, 5)

        self.choice_3 = wx.Choice(self, wx.ID_ANY, choices=["None", "MAV", "ZC", "SSC", "WL", "LS", "MFL", "MSR", "WAMP", "RMS", "IAV", "DASDV", "VAR", "M0", "M2", "M4", "SPARSI", "IFR", "WLF", "AR", "CC", "LD", "MAVFD", "MAVSLP", "MDF", "MNF", "MPK", "SKEW", "KURT", "RMSPHASOR", "PAP", "WLPHASOR", "MZP", "TM", "SM", "SAMPEN", "FUZZYEN", "DFTR", "ISD", "COR", "MDIFF", "MLK", "ACT", "MOB", "COMP", "WENG", "WV", "WWL", "WENT", "MEAN"])
        self.choice_3.SetSelection(0)
        sizer_3.Add(self.choice_3, 0, wx.ALL, 5)

        self.choice_4 = wx.Choice(self, wx.ID_ANY, choices=["None", "MAV", "ZC", "SSC", "WL", "LS", "MFL", "MSR", "WAMP", "RMS", "IAV", "DASDV", "VAR", "M0", "M2", "M4", "SPARSI", "IFR", "WLF", "AR", "CC", "LD", "MAVFD", "MAVSLP", "MDF", "MNF", "MPK", "SKEW", "KURT", "RMSPHASOR", "PAP", "WLPHASOR", "MZP", "TM", "SM", "SAMPEN", "FUZZYEN", "DFTR", "ISD", "COR", "MDIFF", "MLK", "ACT", "MOB", "COMP", "WENG", "WV", "WWL", "WENT", "MEAN"])
        self.choice_4.SetSelection(0)
        sizer_3.Add(self.choice_4, 0, wx.ALL, 5)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.button_OK.Bind(wx.EVT_BUTTON, self.on_ok_pressed)
        # end wxGlade

    def on_ok_pressed(self, event):  # wxGlade: FeaturesDialog.<event_handler>
        if self.choice_1.GetStringSelection()!="None":
            self.selected_features.append(self.choice_1.GetStringSelection())
        if self.choice_2.GetStringSelection()!="None":
            self.selected_features.append(self.choice_2.GetStringSelection())
        if self.choice_3.GetStringSelection()!="None":
            self.selected_features.append(self.choice_3.GetStringSelection())
        if self.choice_4.GetStringSelection()!="None":
            self.selected_features.append(self.choice_4.GetStringSelection())

        print(self.selected_features)
        self.EndModal(wx.ID_OK)
        event.Skip()
# end of class FeaturesDialog
class SensorsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.active_sensors = []
        # begin wxGlade: SensorsDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Select sensors")
        label_1.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_1.Add(label_1, 0, wx.ALL, 4)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)

        self.toggle_btn_1 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 1")
        sizer_4.Add(self.toggle_btn_1, 0, wx.ALL, 4)

        self.toggle_btn_2 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 2")
        sizer_4.Add(self.toggle_btn_2, 0, wx.ALL, 4)

        self.toggle_btn_3 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 3")
        sizer_4.Add(self.toggle_btn_3, 0, wx.ALL, 4)

        self.toggle_btn_4 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 4")
        sizer_4.Add(self.toggle_btn_4, 0, wx.ALL, 4)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)

        self.toggle_btn_5 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 5")
        sizer_5.Add(self.toggle_btn_5, 0, wx.ALL, 4)

        self.toggle_btn_6 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 6")
        sizer_5.Add(self.toggle_btn_6, 0, wx.ALL, 4)

        self.toggle_btn_7 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 7")
        sizer_5.Add(self.toggle_btn_7, 0, wx.ALL, 4)

        self.toggle_btn_8 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 8")
        sizer_5.Add(self.toggle_btn_8, 0, wx.ALL, 4)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_1, 0, wx.ALL | wx.EXPAND, 4)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.button_OK.Bind(wx.EVT_BUTTON, self.on_ok_pressed)
        # end wxGlade


    def on_ok_pressed(self, event):  # wxGlade: SensorsDialog.<event_handler>
        if self.toggle_btn_1.GetValue():
            self.active_sensors.append(0)
        if self.toggle_btn_2.GetValue():
            self.active_sensors.append(1)
        if self.toggle_btn_3.GetValue():
            self.active_sensors.append(2)
        if self.toggle_btn_4.GetValue():
            self.active_sensors.append(3)
        if self.toggle_btn_5.GetValue():
            self.active_sensors.append(4)
        if self.toggle_btn_6.GetValue():
            self.active_sensors.append(5)
        if self.toggle_btn_7.GetValue():
            self.active_sensors.append(6)
        if self.toggle_btn_8.GetValue():
            self.active_sensors.append(7)
        self.EndModal(wx.ID_OK)
        event.Skip()

# end of class SensorsDialog
class DialogOffline(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DialogOffline.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog_1")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_1.Add((0, 0), 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_SAVE = wx.Button(self, wx.ID_SAVE, "")
        self.button_SAVE.SetDefault()
        sizer_2.AddButton(self.button_SAVE)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_SAVE.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        # end wxGlade

# end of class DialogOffline

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.selected_features = []
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.MAXIMIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1936, 1100))
        self.SetTitle("frame")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.nt1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt1, "Record the data")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self.nt1, wx.ID_ANY, "Record the data")
        label_2.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_3.Add(label_2, 0, 0, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_7, 1, wx.EXPAND, 0)

        label_3 = wx.StaticText(self.nt1, wx.ID_ANY, "Select the data sources")
        label_3.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_7.Add(label_3, 0, wx.ALL, 4)

        sizer_8 = wx.GridSizer(1, 4, 0, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)

        self.check_box_1 = wx.CheckBox(self.nt1, wx.ID_ANY, "EMG")
        sizer_8.Add(self.check_box_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.check_box_2 = wx.CheckBox(self.nt1, wx.ID_ANY, "IMU")
        sizer_8.Add(self.check_box_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.button_6 = wx.Button(self.nt1, wx.ID_ANY, "Select sensors\n")
        sizer_8.Add(self.button_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.nt1, wx.ID_ANY, "Select output directory")
        sizer_4.Add(label_1, 0, wx.ALL, 10)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.nt1, wx.ID_ANY, "")
        self.text_ctrl_1.SetMinSize((200, 23))
        sizer_6.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 12)

        self.button_5 = wx.Button(self.nt1, wx.ID_ANY, "Confirm directory\n")
        self.button_5.SetMinSize((75, 30))
        sizer_6.Add(self.button_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        self.button_8 = wx.Button(self.nt1, wx.ID_ANY, "Use default")
        sizer_6.Add(self.button_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)

        self.button_2 = wx.Button(self.nt1, wx.ID_ANY, "Start")
        self.button_2.SetMinSize((60, 25))
        sizer_5.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_1 = wx.Button(self.nt1, wx.ID_ANY, "Pause")
        self.button_1.SetMinSize((60, 25))
        sizer_5.Add(self.button_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_3 = wx.Button(self.nt1, wx.ID_ANY, "Renew\n")
        self.button_3.SetMinSize((60, 25))
        sizer_5.Add(self.button_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_4 = wx.Button(self.nt1, wx.ID_ANY, "End\n")
        self.button_4.SetMinSize((60, 25))
        sizer_5.Add(self.button_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.nt2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt2, "Present the data")

        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.nt2, wx.ID_ANY, ""), wx.VERTICAL)

        label_4 = wx.StaticText(sizer_9.GetStaticBox(), wx.ID_ANY, "Present the data")
        label_4.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_9.Add(label_4, 0, 0, 0)

        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_16, 1, wx.EXPAND, 0)

        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_17, 1, wx.EXPAND, 0)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17.Add(sizer_11, 1, wx.EXPAND, 0)

        label_6 = wx.StaticText(sizer_9.GetStaticBox(), wx.ID_ANY, "Select the source of the presented data")
        sizer_11.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        self.combo_box_1 = wx.ComboBox(sizer_9.GetStaticBox(), wx.ID_ANY, choices=["Visualise current recording session", "Visualise last recording session", "Select the file from operating system", ""], style=wx.CB_READONLY)
        sizer_11.Add(self.combo_box_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_17.Add(sizer_12, 0, 0, 0)

        label_7 = wx.StaticText(sizer_9.GetStaticBox(), wx.ID_ANY, "Select the data sources")
        label_7.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_12.Add(label_7, 0, wx.ALL, 4)

        grid_sizer_1 = wx.GridSizer(1, 3, 0, 0)
        sizer_12.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.checkbox_3 = wx.CheckBox(sizer_9.GetStaticBox(), wx.ID_ANY, "EMG")
        grid_sizer_1.Add(self.checkbox_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.checkbox_4 = wx.CheckBox(sizer_9.GetStaticBox(), wx.ID_ANY, "IMU")
        grid_sizer_1.Add(self.checkbox_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.button_7 = wx.Button(sizer_9.GetStaticBox(), wx.ID_ANY, "Select sensors\n")
        grid_sizer_1.Add(self.button_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(sizer_18, 1, wx.EXPAND, 0)

        label_5 = wx.StaticText(sizer_9.GetStaticBox(), wx.ID_ANY, "Signal processing operations:")
        label_5.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_18.Add(label_5, 0, wx.TOP, 80)

        self.panel_container = wx.Panel(self.nt2, wx.ID_ANY)
        sizer_18.Add(self.panel_container, 1, wx.EXPAND, 0)

        sizer_13 = wx.BoxSizer(wx.VERTICAL)

        self.panel_2 = wx.Panel(self.panel_container, wx.ID_ANY)
        sizer_13.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_14 = wx.BoxSizer(wx.VERTICAL)

        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14.Add(sizer_19, 1, wx.EXPAND, 0)

        self.button_13 = wx.ToggleButton(self.panel_2, wx.ID_ANY, " Amplitude\nChannnels Combined")
        sizer_19.Add(self.button_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_15 = wx.ToggleButton(self.panel_2, wx.ID_ANY, "Heatmap\n")
        sizer_19.Add(self.button_15, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_18 = wx.Button(self.panel_2, wx.ID_ANY, "Adjust Online\nVisualisation Parameters")
        sizer_19.Add(self.button_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.panel_3 = wx.Panel(self.panel_container, wx.ID_ANY)
        sizer_13.Add(self.panel_3, 1, wx.EXPAND, 0)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)

        self.button_20 = wx.ToggleButton(self.panel_3, wx.ID_ANY, "Visualize Standard")
        sizer_15.Add(self.button_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_21 = wx.ToggleButton(self.panel_3, wx.ID_ANY, "Visualize Selected \nFeatures")
        sizer_15.Add(self.button_21, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_22 = wx.ToggleButton(self.panel_3, wx.ID_ANY, "Visualize Selected\n Distributions")
        sizer_15.Add(self.button_22, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_23 = wx.ToggleButton(self.panel_3, wx.ID_ANY, "Visualize Selected\n Distributions Separately")
        sizer_15.Add(self.button_23, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_19 = wx.Button(self.panel_3, wx.ID_ANY, "Adjust Offline\n Visualisation Parameters")
        sizer_15.Add(self.button_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.button_10 = wx.Button(sizer_9.GetStaticBox(), wx.ID_ANY, "Visualize")
        sizer_9.Add(self.button_10, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 50)

        self.nt3 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt3, "Retransmission")

        sizer_10 = wx.BoxSizer(wx.VERTICAL)

        label_8 = wx.StaticText(self.nt3, wx.ID_ANY, "Retransmission")
        label_8.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_10.Add(label_8, 0, wx.ALL, 20)

        self.button_12 = wx.ToggleButton(self.nt3, wx.ID_ANY, "START/STOP")
        self.button_12.SetMinSize((200, 100))
        self.button_12.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_10.Add(self.button_12, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 400)

        self.nt3.SetSizer(sizer_10)

        self.panel_3.SetSizer(sizer_15)

        self.panel_2.SetSizer(sizer_14)

        self.panel_container.SetSizer(sizer_13)

        self.nt2.SetSizer(sizer_9)

        self.nt1.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.button_6.Bind(wx.EVT_BUTTON, self.on_select_pressed)
        self.button_5.Bind(wx.EVT_BUTTON, self.on_confirm_pressed)
        self.button_8.Bind(wx.EVT_BUTTON, self.on_default_pressed)
        self.button_2.Bind(wx.EVT_BUTTON, self.on_start_pressed)
        self.button_1.Bind(wx.EVT_BUTTON, self.on_pause_pressed)
        self.button_3.Bind(wx.EVT_BUTTON, self.on_renew_pressed)
        self.button_4.Bind(wx.EVT_BUTTON, self.on_end_pressed)
        self.combo_box_1.Bind(wx.EVT_COMBOBOX, self.on_combo_box_element_selected)
        self.button_7.Bind(wx.EVT_BUTTON, self.on_select_pressed)
        self.button_15.Bind(wx.EVT_TOGGLEBUTTON, self.on_heatmap_pressed)
        self.button_18.Bind(wx.EVT_BUTTON, self.on_adjust_online)
        self.button_21.Bind(wx.EVT_TOGGLEBUTTON, self.on_visualize_selected_features)
        self.button_22.Bind(wx.EVT_TOGGLEBUTTON, self.on_visualize_slct_dist)
        self.button_23.Bind(wx.EVT_TOGGLEBUTTON, self.on_visualize_slct_dist_sep)
        self.button_19.Bind(wx.EVT_BUTTON, self.on_adjust_offline)
        self.button_10.Bind(wx.EVT_BUTTON, self.on_visualize_pressed)
        self.button_12.Bind(wx.EVT_TOGGLEBUTTON, self.on_start_stop_retr)
        # end wxGlade
        self.last_target_folder = None
        self.target_folder = None
        self.output_dir_path = None
        self.default_output_path = False
        self.active_sensors = []
        self.simulator = None
        self.hide_panels()
        self.folder_visualize = None
        self.regex_filters = []
        self.selected_features_heatmap = []
        self.selected_features_dist = []
        self.selected_features_dist_sep = []
        self.selected_features = []
        self.visualization_additional_data = {
            "num_samples": 500,
            "window_size": 20,
            "window_increment": 10
        }
        self.odh_visualize = None
        self.combo_choice = None


    def on_confirm_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        if not self.default_output_path:
            path = self.text_ctrl_1.GetValue()
            normalized_path = os.path.normpath(path)
        else:
            path = './data_records'
            normalized_path = os.path.abspath(path)

        if os.path.isabs(normalized_path):
            wx.MessageBox("The path format is valid.", "Validation Result", wx.OK | wx.ICON_INFORMATION)
            self.output_dir_path = normalized_path
        else:
            wx.MessageBox("Invalid path format. Please try again.", "Validation Result", wx.OK | wx.ICON_ERROR)
        event.Skip()

    def on_start_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        if self.output_dir_path:
            self.target_folder = os.path.join(self.output_dir_path, f"recorded_data_{current_datetime}")

            if not os.path.exists(self.target_folder):
                os.makedirs(self.target_folder)
            else:
                # Create and show the error message box
                message = f"The target path '{self.target_folder}' already exists as a file."
                wx.MessageDialog(None, message, "Error", wx.ICON_ERROR | wx.OK)
            print(f"Folder '{self.target_folder}' has been created.")

            if self.check_box_1.GetValue():
                is_emg_used = True
            else:
                is_emg_used = False

            if self.check_box_2.GetValue():
                is_imu_used = True
            else:
                is_imu_used = False
                
            streamer, sm = delsys_streamer(emg_port = 50043,
                                           aux_port = 50044,
                                           imu = is_imu_used,
                                           emg = is_emg_used,
                                          channel_list=self.active_sensors)
            self.odh_record = OnlineDataHandler(sm)
            self.odh_record.log_to_file(file_path=os.path.join(self.target_folder, '_'))
            
        else:
            wx.MessageDialog(self, "No folder was selected!", "Error", wx.OK | wx.ICON_ERROR)
        event.Skip()
    def on_end_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        set_key(".env", "LAST_TARGET_FOLDER", str(self.target_folder))
        self.last_target_folder = self.target_folder
        self.target_folder = None
        self.output_dir_path = None
        self.default_output_path = False
        self.active_sensors=[]
        self.odh_record.stop_log()
        event.Skip()
    def on_default_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.default_output_path = True
        wx.MessageBox("The data will be saved to ./data_records folder", "Validation Result", wx.OK | wx.ICON_INFORMATION)
        self.on_confirm_pressed(event)
        event.Skip()
    def on_select_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = SensorsDialog(self)
        if dialog.ShowModal() == wx.ID_OK:
            self.active_sensors = dialog.active_sensors
            print(self.active_sensors)
        event.Skip()

    def on_start_stop_retr(self, event):  # wxGlade: MyFrame.<event_handler>
        if self.button_12.GetValue():
            self.simulator = TrignoDataSimulator()
            self.simulator.start()
            self.button_12.SetBackgroundColour("green")
        else:
            self.simulator.stop_transmission()
            self.button_12.SetBackgroundColour(wx.Colour(225, 225, 225))

        event.Skip()
    def on_pause_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.odh_record.stop_log()
        event.Skip()
    def on_renew_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.odh_record.log_to_file(file_path=os.path.join(self.target_folder, '_'))
        event.Skip()
    def on_combo_box_element_selected(self, event):  # wxGlade: MyFrame.<event_handler>
        def choose_file():
            with wx.FileDialog(None, "Choose a file", defaultDir="./data_records",
                               style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
                if fileDialog.ShowModal() == wx.ID_CANCEL:
                    return None

                return fileDialog.GetPath()
        self.hide_panels()
        self.combo_choice = self.combo_box_1.GetStringSelection()

        if self.combo_choice == "Select the file from operating system":

            self.panel_3.Show()
            self.panel_3.Raise()
            self.folder_visualize = choose_file()
            if self.folder_visualize:
                print(f"Selected dir: {self.folder_visualize}")
            else:
                wx.MessageBox("You need to select dir","Select Dir", wx.OK | wx.ICON_INFORMATION)
                event.Skip()
                return

        if self.combo_choice == "Visualise last recording session":
            try:
                self.folder_visualize = get_key( str(Path(".env")), "LAST_TARGET_FOLDER")
                if self.folder_visualize is not None:
                    print(f"The last target folder value is present inside the .env: {self.folder_visualize}")
                else:
                    wx.MessageBox("The last target folder value is not present inside the .env",".env missing key", wx.OK | wx.ICON_INFORMATION)
                    event.Skip()
                    return

            except Exception:
                wx.MessageBox(".env doesn't exist", ".env missing", wx.OK | wx.ICON_INFORMATION)
                event.Skip()
                return
            self.panel_3.Show()
            self.panel_3.Raise()

        if self.combo_choice == "Visualise current recording session":
            self.panel_2.Show()
            self.panel_2.Raise()

        self.panel_container.Layout()
        self.Layout()

        event.Skip()
    def on_visualize_pressed(self, event):  # wxGlade: MyFrame.<event_handler>

        self.regex_filters = []

        if self.checkbox_3.GetValue():
            is_emg_used = True
            self.regex_filters.append(RegexFilter(left_bound='/', right_bound="emg.csv", values=['_'], description='emg'))
        else:
            is_emg_used = False

        if self.checkbox_4.GetValue():
            is_imu_used = True
            self.regex_filters.append(RegexFilter(left_bound='/', right_bound="imu.csv", values=['_'], description='imu'))
        else:
            is_imu_used = False



        if self.combo_choice == "Select the file from operating system" or self.combo_choice == "Visualise last recording session":
            ofdh = OfflineDataHandler()
            ofdh.get_data(folder_location=self.folder_visualize, regex_filters=self.regex_filters, delimiter=' ')
            ofdh_new = ofdh.isolate_channels(self.active_sensors)
            windows, _ = ofdh_new.parse_windows(self.visualization_additional_data["window_size"], self.visualization_additional_data["window_increment"])
            fe = FeatureExtractor()
            feature_set_dict = fe.extract_features(['MEAN'], windows)
            fe.visualize(feature_set_dict)


        elif self.combo_choice == "Visualise current recording session":
            streamer, sm = delsys_streamer(emg_port=50043,
                                           aux_port=50044,
                                           imu=is_imu_used,
                                           emg=is_emg_used,
                                           channel_list=self.active_sensors)
            self.odh_visualize = OnlineDataHandler(sm)

            if self.button_13.GetValue():
                self.odh_visualize.visualize()

            if self.button_15:
                self.odh_visualize.visualize_heatmap(self.visualization_additional_data["num_samples"],self.selected_features)

        self.selected_features_heatmap = []
        self.selected_features_dist = []
        self.selected_features_dist_sep = []
        self.selected_features = []
        self.folder_visualize = None
        self.visualization_additional_data = {
            "num_samples": 500,
            "window_size": 20,
            "window_increment": 10
        }
        self.active_sensors = []
        event.Skip()
    def on_select_features_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        if event.GetEventObject().GetValue():
            dialog = FeaturesDialog(self)
            if dialog.ShowModal() == wx.ID_OK:
                return dialog.selected_features
        return []


    def hide_panels(self):
        self.panel_2.Hide()
        self.panel_3.Hide()

    def on_adjust(self, mode):
        dialog = DialogAdjustVisualization(mode, self)
        if dialog.ShowModal() == wx.ID_OK:
            self.visualization_additional_data = dialog.visualization_additional_data
            print(f"additional data: {self.visualization_additional_data}")
    def on_adjust_offline(self, event):  # wxGlade: MyFrame.<event_handler>
        self.on_adjust("Offline")
        event.Skip()
    def on_adjust_online(self, event):  # wxGlade: MyFrame.<event_handler>
        self.on_adjust("Online")
        event.Skip()
    def on_heatmap_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        if event.GetEventObject().GetValue():
            self.selected_features_heatmap = self.on_select_features_pressed(event)
        event.Skip()
    
    def on_visualize_slct_dist(self, event):  # wxGlade: MyFrame.<event_handler>
        if event.GetEventObject().GetValue():
            self.selected_features_dist = self.on_select_features_pressed(event)
        event.Skip()
    def on_visualize_selected_features(self, event):  # wxGlade: MyFrame.<event_handler>
        if event.GetEventObject().GetValue():
            self.selected_features = self.on_select_features_pressed(event)
        event.Skip()
    def on_visualize_slct_dist_sep(self, event):  # wxGlade: MyFrame.<event_handler>
        if event.GetEventObject().GetValue():
            self.selected_features_dist_sep = self.on_select_features_pressed(event)
        event.Skip()
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
