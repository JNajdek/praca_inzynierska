#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0 on Sun Nov 10 12:42:30 2024
#


import wx

# begin wxGlade: dependencies
# end wxGlade
import numpy as np
import serial
import time
from datetime import datetime
from libemg.streamers import delsys_streamer
from libemg.data_handler import OnlineDataHandler
import os
# begin wxGlade: extracode
# end wxGlade


class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Select sensors")
        label_1.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_1.Add(label_1, 0, wx.ALL, 4)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)

        self.toggle_btn_1 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 1")
        sizer_4.Add(self.toggle_btn_1, 0, wx.ALL, 4)

        self.toggle_btn_2 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 2")
        sizer_4.Add(self.toggle_btn_2, 0, wx.ALL, 4)

        self.toggle_btn_3 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 3")
        sizer_4.Add(self.toggle_btn_3, 0, wx.ALL, 4)

        self.toggle_btn_4 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 4")
        sizer_4.Add(self.toggle_btn_4, 0, wx.ALL, 4)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)

        self.toggle_btn_5 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 5")
        sizer_5.Add(self.toggle_btn_5, 0, wx.ALL, 4)

        self.toggle_btn_6 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 6")
        sizer_5.Add(self.toggle_btn_6, 0, wx.ALL, 4)

        self.toggle_btn_7 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 7")
        sizer_5.Add(self.toggle_btn_7, 0, wx.ALL, 4)

        self.toggle_btn_8 = wx.ToggleButton(self, wx.ID_ANY, "Sensor 8")
        sizer_5.Add(self.toggle_btn_8, 0, wx.ALL, 4)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_1, 0, wx.ALL | wx.EXPAND, 4)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_1)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_2)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_3)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_4)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_5)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_6)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_7)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_toggle_pressed, self.toggle_btn_8)
        self.Bind(wx.EVT_BUTTON, self.on_ok_pressed, self.button_OK)
        # end wxGlade
        
        self.active_sensors = []

    def on_ok_pressed(self, event):  # wxGlade: MyDialog.<event_handler>
        if self.toggle_btn_1.GetValue():
            self.active_sensors.append(1)
        if self.toggle_btn_2.GetValue():
            self.active_sensors.append(2)
        if self.toggle_btn_3.GetValue():
            self.active_sensors.append(3)
        if self.toggle_btn_4.GetValue():
            self.active_sensors.append(4)
        if self.toggle_btn_5.GetValue():
            self.active_sensors.append(5)
        if self.toggle_btn_6.GetValue():
            self.active_sensors.append(6)
        if self.toggle_btn_7.GetValue():
            self.active_sensors.append(7)
        if self.toggle_btn_8.GetValue():
            self.active_sensors.append(8)
        self.EndModal(wx.ID_OK)
        

        event.Skip()

    def on_toggle_pressed(self, event):  # wxGlade: MyDialog.<event_handler>
        print("Event handler 'on_toggle_pressed' not implemented!")
        event.Skip()
# end of class MyDialog
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((450, 300))
        self.SetTitle("frame")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.notebook_1 = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)

        self.nt1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt1, "Record the data")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self.nt1, wx.ID_ANY, "Record the data")
        label_2.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_3.Add(label_2, 0, 0, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_7, 1, wx.EXPAND, 0)

        label_3 = wx.StaticText(self.nt1, wx.ID_ANY, "Select the data sources")
        label_3.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_7.Add(label_3, 0, wx.ALL, 4)

        sizer_8 = wx.GridSizer(1, 4, 0, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)

        self.check_box_1 = wx.CheckBox(self.nt1, wx.ID_ANY, "EMG")
        sizer_8.Add(self.check_box_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.check_box_2 = wx.CheckBox(self.nt1, wx.ID_ANY, "IMU")
        sizer_8.Add(self.check_box_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.button_6 = wx.Button(self.nt1, wx.ID_ANY, "Select sensors\n")
        sizer_8.Add(self.button_6, 0, wx.ALL, 4)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.nt1, wx.ID_ANY, "Select output directory")
        sizer_4.Add(label_1, 0, wx.ALL, 10)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)

        self.text_ctrl_1 = wx.TextCtrl(self.nt1, wx.ID_ANY, "")
        self.text_ctrl_1.SetMinSize((200, 23))
        sizer_6.Add(self.text_ctrl_1, 0, wx.ALL, 12)

        self.button_5 = wx.Button(self.nt1, wx.ID_ANY, "Confirm directory\n")
        self.button_5.SetMinSize((75, 30))
        sizer_6.Add(self.button_5, 0, wx.ALL, 8)

        self.button_8 = wx.Button(self.nt1, wx.ID_ANY, "Use default")
        sizer_6.Add(self.button_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)

        self.button_2 = wx.Button(self.nt1, wx.ID_ANY, "Start")
        self.button_2.SetMinSize((60, 25))
        sizer_5.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_1 = wx.Button(self.nt1, wx.ID_ANY, "Pause")
        self.button_1.SetMinSize((60, 25))
        sizer_5.Add(self.button_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_3 = wx.Button(self.nt1, wx.ID_ANY, "Renew\n")
        self.button_3.SetMinSize((60, 25))
        sizer_5.Add(self.button_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.button_4 = wx.Button(self.nt1, wx.ID_ANY, "End\n")
        self.button_4.SetMinSize((60, 25))
        sizer_5.Add(self.button_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 15)

        self.nt2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt2, "Present the data")

        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.nt2, wx.ID_ANY, ""), wx.VERTICAL)

        label_4 = wx.StaticText(self.nt2, wx.ID_ANY, "Present the data")
        label_4.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_9.Add(label_4, 0, 0, 0)

        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_9.Add(sizer_12, 1, wx.EXPAND, 0)

        label_5 = wx.StaticText(self.nt2, wx.ID_ANY, "Signal processing operations")
        sizer_12.Add(label_5, 0, 0, 0)

        sizer_12.Add((0, 0), 0, 0, 0)

        label_7 = wx.StaticText(self.nt2, wx.ID_ANY, "Select the data sources")
        label_7.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        sizer_9.Add(label_7, 0, wx.ALL, 4)

        grid_sizer_1 = wx.GridSizer(1, 3, 0, 0)
        sizer_9.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.checkbox_3 = wx.CheckBox(self.nt2, wx.ID_ANY, "EMG")
        grid_sizer_1.Add(self.checkbox_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.checkbox_4 = wx.CheckBox(self.nt2, wx.ID_ANY, "IMU")
        grid_sizer_1.Add(self.checkbox_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.button_7 = wx.Button(self.nt2, wx.ID_ANY, "Select sensors\n")
        grid_sizer_1.Add(self.button_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_11, 1, wx.EXPAND, 0)

        label_6 = wx.StaticText(self.nt2, wx.ID_ANY, "Select the source of the presented data")
        sizer_11.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        self.combo_box_1 = wx.ComboBox(self.nt2, wx.ID_ANY, choices=["Visualise current recording session", "Visualise last recording session", "Select the file from operating system", ""], style=wx.CB_DROPDOWN)
        sizer_11.Add(self.combo_box_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)

        self.nt3 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1.AddPage(self.nt3, "Retransmission")

        sizer_10 = wx.BoxSizer(wx.VERTICAL)

        label_8 = wx.StaticText(self.nt3, wx.ID_ANY, "Retransmission")
        sizer_10.Add(label_8, 0, 0, 0)

        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_10.Add(sizer_13, 1, wx.EXPAND, 0)

        label_9 = wx.StaticText(self.nt3, wx.ID_ANY, "Select the data sources")
        sizer_13.Add(label_9, 0, wx.ALL, 4)

        grid_sizer_2 = wx.GridSizer(1, 3, 0, 0)
        sizer_13.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        self.checkbox_5 = wx.CheckBox(self.nt3, wx.ID_ANY, "EMG")
        grid_sizer_2.Add(self.checkbox_5, 0, wx.ALL, 4)

        self.checkbox_6 = wx.CheckBox(self.nt3, wx.ID_ANY, "IMU")
        grid_sizer_2.Add(self.checkbox_6, 0, wx.ALL, 4)

        self.button_9 = wx.Button(self.nt3, wx.ID_ANY, "Select Sensors")
        grid_sizer_2.Add(self.button_9, 0, wx.ALL, 4)

        self.button_12 = wx.ToggleButton(self.nt3, wx.ID_ANY, "START/STOP")
        sizer_10.Add(self.button_12, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 16)

        self.nt3.SetSizer(sizer_10)

        self.nt2.SetSizer(sizer_9)

        self.nt1.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_select_pressed, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.on_confirm_pressed, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.on_default_pressed, self.button_8)
        self.Bind(wx.EVT_BUTTON, self.on_start_pressed, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.on_pause_pressed, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.on_renew_pressed, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.on_end_pressed, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.on_select_pressed, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.on_select_pressed, self.button_9)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_start_stop_retr, self.button_12)
        # end wxGlade
        self.active_sensors = []
    def on_confirm_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        if not self.default_output_path:
            path = self.text_ctrl_1.GetValue()
            normalized_path = os.path.normpath(path)
        else:
            path = './data_records'
            normalized_path = os.path.abspath(path)

        if os.path.isabs(normalized_path):
            wx.MessageBox("The path format is valid.", "Validation Result", wx.OK | wx.ICON_INFORMATION)
            self.output_dir_path = normalized_path
        else:
            wx.MessageBox("Invalid path format. Please try again.", "Validation Result", wx.OK | wx.ICON_ERROR)
        event.Skip()

    def on_start_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        if self.output_dir_path:
            self.target_folder = os.path.join(self.output_dir_path, f"recorded_data_{current_datetime}")

            if not os.path.exists(self.target_folder):
                os.makedirs(self.target_folder)
            else:
                # Create and show the error message box
                message = f"The target path '{self.target_folder}' already exists as a file."
                wx.MessageDialog(None, message, "Error", wx.ICON_ERROR | wx.OK)
            print(f"Folder '{self.target_folder}' has been created.")
            
            if self.check_box_1.GetValue():
                is_emg_used = True
            else:
                is_emg_used = False

                # Tworzenie lub dopisywanie do pliku emg.csv, jeśli odpowiedni radiobutton jest zaznaczony
            if self.check_box_2.GetValue():
                is_imu_used = True
            else:
                is_imu_used = False
                
            streamer, sm = delsys_streamer(emg_port = 50043,
                                           aux_port = 50044,
                                           imu = is_imu_used,
                                           emg = is_emg_used,
                                           channel_list=self.active_sensors)
            self.odh = OnlineDataHandler(sm)
            self.odh.log_to_file(file_path=self.target_folder)
            
        else:
            wx.MessageDialog(self, "No folder was selected!", "Error", wx.OK | wx.ICON_ERROR)
        event.Skip()
    def on_end_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        
        if self.imu_file:
            self.last_imu_recording_path = self.imu_file.name
            self.imu_file.close()
        if self.emg_file:
            self.last_emg_recording_path = self.emg_file.name
            self.emg_file.close()
        self.output_dir_path = None
        self.default_output_path = False
        self.active_sensors=[]
        self.odh.stop_log()
        event.Skip()
    def on_default_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.default_output_path = True
        wx.MessageBox("The data will be saved to ./data_records folder", "Validation Result", wx.OK | wx.ICON_INFORMATION)
        self.on_confirm_pressed(event)
        event.Skip()
    def on_select_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        dialog = MyDialog(self)
        if dialog.ShowModal() == wx.ID_OK:
            self.active_sensors = dialog.active_sensors
            print(self.active_sensors)
        event.Skip()
    def on_default_retransmission_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.default_retransmission = True
        event.Skip()
    def on_start_stop_retr(self, event):  # wxGlade: MyFrame.<event_handler>
        if self.default_retransmission:
            pass
        event.Skip()
    def on_pause_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.odh.stop_log()
        event.Skip()
    def on_renew_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        self.odh.log_to_file(file_path=self.target_folder)
        event.Skip()
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
